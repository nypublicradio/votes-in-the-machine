#! /usr/bin/env node

const chalk = require('chalk');
const inquirer = require('inquirer');
const program = require('commander');
const aws = require('aws-sdk');

const { getRules, pickRulePrompt } = require('./lib/util.js');

const cloudwatch = new aws.CloudWatchEvents();

const { log } = console;

program
  .option('-r, --rule [rule prefix]', 'filter rule options by prefix')
  .option('-e, --environment [env]', 'filter options by environment')
  .parse(process.argv);

const { environment } = program;

const MESSAGE = 'Pick a rule to modify.';

const ENABLE_OR_DISABLE = {
  type: 'list',
  name: 'enable',
  message: 'Enable or Disable?',
  choices: [{name: 'Enable', value: true}, {name: 'Disable', value: false}]
};

const RULE_OK = rule => ({
  type: 'expand',
  name: 'rule',
  message: `Rule "${rule.Name}" ok to modify?`,
  choices: [{key: 'y', name: 'Yes', value: rule}, {key: 'n', name: 'No', value: false}],
  default: 0
})

async function updateRuleState(rule, enable) {
  if (enable) {
    await cloudwatch.enableRule({Name: rule.Name}).promise();
  } else {
    await cloudwatch.disableRule({Name: rule.Name}).promise();
  }
}

async function chooseAndUpdate(rules) {
  let pickARule = pickRulePrompt(rules, MESSAGE);
  let { rule, enable } = await inquirer.prompt([pickARule, ENABLE_OR_DISABLE]);

  await updateRuleState(rule, enable);
  return rule;
}

async function confirmAndUpdate(rule) {
  let { rule:chosen } = await inquirer.prompt(RULE_OK(rule));
  if (chosen === false) {
    log(chalk`Not modifying {keyword('orange') ${rule.Name}}`);
    process.exit();
  } else {
    let { enable } = await inquirer.prompt(ENABLE_OR_DISABLE);
    await updateRuleState(chosen, enable);
    return chosen;
  }
}

async function logSuccess(rule) {
  let updated = await cloudwatch.describeRule({Name: rule.Name}).promise();
  log(chalk.bold.green('Success.\n'), updated);
}

if (program.rule) {
  cloudwatch.listRules({NamePrefix: program.rule}).promise()
    .then(({ Rules }) => {
      if (Rules.length > 1) {
        return chooseAndUpdate(Rules);
      } else if (Rules.length === 1) {
        return confirmAndUpdate(Rules[0]);
      } else {
        log(chalk.red('No rules found for name "%s"'), program.rule);
        process.exit();
      }
    })
    .then(logSuccess);
} else {
  getRules(environment)
    .then(rules => chooseAndUpdate(rules))
    .then(logSuccess);
}
